%%%%%%%%%% description %%%%%%%%%%%%%%
% Created on Mon Apr 4 2022
% Place : Japan,
% Author : Yuta Suzuki

% Eye-tracker     : 
% Display         : 
% Visual distance :

% Copyright (c) 2022 Yuta Suzuki
% This software is released under the MIT License, see LICENSE.

%% -----------------------------------

clear all;
close all;
Screen('Close')
Screen('Preference', 'SkipSyncTests', 1);
rng('shuffle');

% OpenGL
AssertOpenGL;

% participant's info
% prompt = 'Demo? (yes:1 / no:2) --> ';
% demoMode =input(prompt);
%
% prompt = 'Name? ----> ';
% participantsInfo.name = input(prompt,'s');
% prompt = 'Age? ----> ';
% participantsInfo.age = input(prompt,'s');

today_date = datestr(now, 30);

% hide a cursor point
HideCursor;
ListenChar(2);
myKeyCheck;

%% --------------------paradigm settings------------------
cfg = [];
cfg.TIME_ISI = 2;                % ISI[s]
cfg.TIME_FIXATION = 2;           % fixation period[s]

cfg.playTime = 170;              % sound presentation [s]
cfg.FRAME_RATE = 60;        

cfg.VISUAL_DISTANCE = 60;        % visual distance from a monitor to the eyes [cm]
cfg.NUM_TRIAL = 1;
cfg.LUMINANCE_BACKGROUND = 140;  % [RGB]
cfg.DOT_PITCH = 0.271;           % Flexscan S2133 (21.3 inch, 1600 x 1200 pixels size)

%% -------------------------------------------------------------
% set KeyInfo
parmSetting();
cfg.key.KEY_LEFT  = KbName('LeftArrow');
cfg.key.KEY_RIGHT = KbName('RightArrow');
cfg.key.KEY_DOWN  = KbName('DownArrow');

% set empty screen
empty = Screen('OpenOffscreenWindow',screenNumber,cfg.LUMINANCE_BACKGROUND, [],[],32);

% fixation
fixlength = pixel_size(cfg.DOT_PITCH, 0.1, cfg.VISUAL_DISTANCE);
FixationXY = [centerX-1*fixlength, centerX+fixlength, centerX, centerX; centerY, centerY, centerY-1*fixlength, centerY+fixlength];
FixColor = [0 0 0];
fix = Screen('OpenOffscreenWindow',screenNumber, cfg.LUMINANCE_BACKGROUND,[],[],32);
Screen('DrawLines', fix, FixationXY,2, FixColor);

% refresh rate of screen
Screen('BlendFunction', win, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

%% show some messages before start
% ShowMessage();
folderList = dir('./stim/*.wav');
for i = 1:size(folderList,1)
    [stim_sound{i,1},Fs] = audioread([folderList(i).folder '/' folderList(i).name]);
    stim_sound{i,1} = repmat(stim_sound{i,1},1,2)';
end

out = [stim_sound{cfg.condition_frame.t0_order_ctrl(cfg.count.reference,iTone)}];
          
 
folderList = folderList(~ismember({folderList.name},...
    {'._sync_horizon.mp4', '._sync_vertical.mp4','._unsync_horizon.mp4','._unsync_vertical.mp4'}));

% cfg.condition_frame = 1:length(folderList);
% cfg.condition_frame = repmat(cfg.condition_frame,1,cfg.NUM_TRIAL);
% cfg.condition_frame = cfg.condition_frame(randperm(size(cfg.condition_frame,2)));

if useEyelink
    Eyelink('Message', 'Start_Experiment');
end

%% Start playback engine:
load('C:\Users\admin\Desktop\suzuki\Pxx_PerceptualAlternation\e6_sync\results\ys_1\bistableSync_ys_20201109T161625_condition.mat')
cfg.condition_frame = [3 4 2 1];


%%-------------------------------------
fprintf('********* Start **********\n')

for iTrial = 4:length(cfg.condition_frame)
   
    ShowMessage();
    if useEyelink
        EyelinkDoDriftCorrection(el);
        Eyelink('StartRecording');
        WaitSecs(0.1);
    end
    
    %% fixation
    Fixation();
    
    %% presentation
    Presentation();
end

if useEyelink
    Eyelink('Message', 'End_Experiment');
end

fprintf('********* Finish **********\n')

sca;
ListenChar(0);

save_name = ['/bistableSync_',cfg.participantsInfo.name,'_',today_date];
saveFiles();